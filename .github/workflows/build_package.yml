name: Compile & Package

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'whats the tag name you want for this release?'
        required: true
        type: string

# default working directory for every jobs set to checkout dir
# /home/runner/work/<git dir>/<checkout git dir> <== default working directory

jobs:
  build-package:
    runs-on: ubuntu-20.04
    env:
      LIBUSB1_VER: 1.0.26
      HIDAPI_VER: 0.11.2
      LIBFTDI_VER: 1.5
      CAPSTONE_VER: 5.0-rc2
      PREFIX: '/usr'

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Environment setup
      run: |
        echo "Release tag name: ${{ inputs.release_tag }}"
        cat $GITHUB_ENV
        cd ..
        echo "ROOT_DIR=$PWD" >> $GITHUB_ENV
        echo "BUILD_DIR=$PWD/build" >> $GITHUB_ENV
        echo "DOWNLOAD_DIR=$PWD/download" >> $GITHUB_ENV
        echo "SYSROOT=$PWD/root" >> $GITHUB_ENV

        echo "LIBUSB1_SRC=$PWD/download/libusb-${LIBUSB1_VER}" >> $GITHUB_ENV
        echo "HIDAPI_SRC=$PWD/download/hidapi-hidapi-${HIDAPI_VER}" >> $GITHUB_ENV
        echo "LIBFTDI_SRC=$PWD/download/libftdi1-${LIBFTDI_VER}" >> $GITHUB_ENV
        echo "CAPSTONE_SRC=$PWD/download/capstone-${CAPSTONE_VER}" >> $GITHUB_ENV

        echo "BUILD_USB1_DIR=$PWD/build/libusb1" >> $GITHUB_ENV
        echo "BUILD_HIDAPI_DIR=$PWD/build/hidapi" >> $GITHUB_ENV
        echo "BUILD_FTDI_DIR=$PWD/build/libftdi" >> $GITHUB_ENV
        echo "BUILD_CAPSTONE_DIR=$PWD/build/capstone" >> $GITHUB_ENV
        echo "BUILD_OPENOCD_DIR=$PWD/build/openocd" >> $GITHUB_ENV

    - name: pre-requisite installation
      run: |
        mkdir -p $SYSROOT $BUILD_DIR $DOWNLOAD_DIR $BUILD_USB1_DIR $BUILD_HIDAPI_DIR $BUILD_FTDI_DIR $BUILD_CAPSTONE_DIR $BUILD_OPENOCD_DIR
        sudo apt-get update
        sudo apt-get install tree autotools-dev autoconf automake libtool pkg-config cmake texinfo texlive

    - name: Download dependencies
      run: |
        cd $DOWNLOAD_DIR
        apt download libudev1 libudev-dev
        find . -iname '*.deb' -exec dpkg -x '{}' $SYSROOT \;
        sudo dpkg -i *.deb

        cd $ROOT_DIR
        tree -a
        cd $DOWNLOAD_DIR

        wget "https://github.com/libusb/libusb/releases/download/v${LIBUSB1_VER}/libusb-${LIBUSB1_VER}.tar.bz2"
        tar -xjf libusb-${LIBUSB1_VER}.tar.bz2

        wget "http://www.intra2net.com/en/developer/libftdi/download/libftdi1-${LIBFTDI_VER}.tar.bz2"
        tar -xjf libftdi1-${LIBFTDI_VER}.tar.bz2

        wget "https://github.com/aquynh/capstone/archive/${CAPSTONE_VER}.tar.gz"
        # tar -xzf ${CAPSTONE_VER}.tar.gz

        wget "https://github.com/libusb/hidapi/archive/hidapi-${HIDAPI_VER}.tar.gz"
        tar -xzf hidapi-${HIDAPI_VER}.tar.gz

    - name: Building
      env:
        PKG_CONFIG_DIR: ""
        # PKG_CONFIG_PATH: ""
      run: |
        export PKG_CONFIG_LIBDIR="$SYSROOT$PREFIX/lib/pkgconfig:$SYSROOT$PREFIX/share/pkgconfig:$SYSROOT$PREFIX/lib/x86_64-linux-gnu/pkgconfig"
        export PKG_CONFIG_SYSROOT_DIR=$SYSROOT
        # export PKG_CONFIG_PATH="$SYSROOT$PREFIX/lib/pkgconfig:$SYSROOT$PREFIX/share/pkgconfig"
        echo $PKG_CONFIG_SYSROOT_DIR
        echo $PKG_CONFIG_LIBDIR

        cd $BUILD_USB1_DIR
        $LIBUSB1_SRC/configure --build=`$LIBUSB1_SRC/config.guess` --with-sysroot=$SYSROOT --prefix=$PREFIX
        make -j
        make install DESTDIR=$SYSROOT

        pkg-config --variable pc_path pkg-config
        pkg-config --exists --print-errors libusb-1.0
        pkg-config --variable=includedir libusb-1.0
        pkg-config --variable=libdir libusb-1.0
        pkg-config --variable=pcfiledir libusb-1.0

        cd $HIDAPI_SRC
        ./bootstrap
        cd $BUILD_HIDAPI_DIR
        LDFLAGS=-L$SYSROOT$PREFIX/lib $HIDAPI_SRC/configure --build=`$HIDAPI_SRC/config.guess` --with-sysroot=$SYSROOT --prefix=$PREFIX --disable-shared
        cat config.log
        make -j
        make install DESTDIR=$SYSROOT

        cd $BUILD_FTDI_DIR
        cmake -DSTATICLIBS=ON -DEXAMPLES=OFF -DFTDI_EEPROM=OFF -DCMAKE_INSTALL_PREFIX=PREFIX $LIBFTDI_SRC
        make install DESTDIR=$SYSROOT

        cd $BUILD_CAPSTONE_DIR
        tar -xzf $DOWNLOAD_DIR/${CAPSTONE_VER}.tar.gz --strip-components=1
        make install DESTDIR=$SYSROOT PREFIX=$PREFIX CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no
        capstonepc=$SYSROOT$PREFIX/lib/pkgconfig/capstone.pc
        sed -i '/^libdir=/d' $capstonepc
        sed -i '/^includedir=/d' $capstonepc
        sed -i '/^archive=/d' $capstonepc
        sed -i '1s;^;prefix=/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include/capstone\n\n;' $capstonepc

        cd $GITHUB_WORKSPACE
        gcc -o $BUILD_DIR/test entry.c

        tree -ah $SYSROOT

    - name: Publish packages step 1
      run: |
        GIT_TAG="`git tag --points-at HEAD`"
        [ -z $GIT_TAG ] && GIT_TAG="`git rev-parse --short HEAD`"
        # check if there is tag pointing at HEAD, if so the release will have the same name as the tag,
        # otherwise it will be named 'latest'
        RELEASE_NAME="`git tag --points-at HEAD`"
        [ -z $RELEASE_NAME ] && RELEASE_NAME="latest"
        [[ $RELEASE_NAME = "latest" ]] && IS_PRE_RELEASE="true" || IS_PRE_RELEASE="false"
        ARTIFACT="pkg-${GIT_TAG}-ubuntu-$(lsb_release -r|cut -f2).tar.xz"

        (cd $SYSROOT$PREFIX; tar -c .) | xz -zeT0 -9 > $ROOT_DIR/$ARTIFACT

        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
        echo "IS_PRE_RELEASE=$IS_PRE_RELEASE" >> $GITHUB_ENV
        echo "ARTIFACT_PATH=$ROOT_DIR/$ARTIFACT" >> $GITHUB_ENV

    - name: Publish packages step 2
      uses: actions/upload-artifact@v3
      with:
        name: test-package
        path: ${{ env.ARTIFACT_PATH }}

# this release action has some depreceated github api usage
    # - name: Release the package
    #   uses: marvinpinto/action-automatic-releases@latest
    #   with:
    #     title: "test builds on main branch ${{ env.RELEASE_NAME }}"
    #     automatic_release_tag: "latest"
    #     prerelease: ${{ env.IS_PRE_RELEASE }}
    #     repo_token: ${{ secrets.ACCESS_TOKEN }}
    #     files: ${{ env.ARTIFACT_PATH }}

    - name: Release the package
      uses: ncipollo/release-action@v1
      with:
        name: "test builds on main branch ${{ env.RELEASE_NAME }}"
        allowUpdates: false
        prerelease: ${{ env.IS_PRE_RELEASE }}
        commit: main  # use the branch name
        tag: ${{ inputs.release_tag }}
        token: ${{ secrets.ACCESS_TOKEN }}
        artifacts: ${{ env.ARTIFACT_PATH }}
